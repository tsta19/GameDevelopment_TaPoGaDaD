//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/MadsMove/AdvancedControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AdvancedControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AdvancedControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AdvancedControls"",
    ""maps"": [
        {
            ""name"": ""ManualPlayer"",
            ""id"": ""32b3cdbc-7b95-42e4-bc79-e20be71db16c"",
            ""actions"": [
                {
                    ""name"": ""R_Move"",
                    ""type"": ""Button"",
                    ""id"": ""475a178d-7b43-4191-bef0-152ba654737f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""L_Move"",
                    ""type"": ""Button"",
                    ""id"": ""eb00871c-8a03-4794-911d-4d2387d26296"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""9d31e39b-a6d4-49ca-bb11-9604058042fa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c369fe7b-61bd-4976-94e1-e84ef7cd59e2"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""R_Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5d6ff057-a94d-4977-9702-b3b241bbfa33"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""L_Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3e8a8f2f-276f-4228-a828-5d579e60a31c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""20a54c8b-d441-41f5-a825-40c7e8db0722"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""560c205f-7d1d-43bb-bf5f-06fef9e087e3"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2e04dca6-9c85-4553-90fe-74bce32f4425"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1d9bef0d-53ac-4456-b5cc-d4fc6c74edaf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // ManualPlayer
        m_ManualPlayer = asset.FindActionMap("ManualPlayer", throwIfNotFound: true);
        m_ManualPlayer_R_Move = m_ManualPlayer.FindAction("R_Move", throwIfNotFound: true);
        m_ManualPlayer_L_Move = m_ManualPlayer.FindAction("L_Move", throwIfNotFound: true);
        m_ManualPlayer_Move = m_ManualPlayer.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ManualPlayer
    private readonly InputActionMap m_ManualPlayer;
    private IManualPlayerActions m_ManualPlayerActionsCallbackInterface;
    private readonly InputAction m_ManualPlayer_R_Move;
    private readonly InputAction m_ManualPlayer_L_Move;
    private readonly InputAction m_ManualPlayer_Move;
    public struct ManualPlayerActions
    {
        private @AdvancedControls m_Wrapper;
        public ManualPlayerActions(@AdvancedControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @R_Move => m_Wrapper.m_ManualPlayer_R_Move;
        public InputAction @L_Move => m_Wrapper.m_ManualPlayer_L_Move;
        public InputAction @Move => m_Wrapper.m_ManualPlayer_Move;
        public InputActionMap Get() { return m_Wrapper.m_ManualPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ManualPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IManualPlayerActions instance)
        {
            if (m_Wrapper.m_ManualPlayerActionsCallbackInterface != null)
            {
                @R_Move.started -= m_Wrapper.m_ManualPlayerActionsCallbackInterface.OnR_Move;
                @R_Move.performed -= m_Wrapper.m_ManualPlayerActionsCallbackInterface.OnR_Move;
                @R_Move.canceled -= m_Wrapper.m_ManualPlayerActionsCallbackInterface.OnR_Move;
                @L_Move.started -= m_Wrapper.m_ManualPlayerActionsCallbackInterface.OnL_Move;
                @L_Move.performed -= m_Wrapper.m_ManualPlayerActionsCallbackInterface.OnL_Move;
                @L_Move.canceled -= m_Wrapper.m_ManualPlayerActionsCallbackInterface.OnL_Move;
                @Move.started -= m_Wrapper.m_ManualPlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_ManualPlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_ManualPlayerActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_ManualPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @R_Move.started += instance.OnR_Move;
                @R_Move.performed += instance.OnR_Move;
                @R_Move.canceled += instance.OnR_Move;
                @L_Move.started += instance.OnL_Move;
                @L_Move.performed += instance.OnL_Move;
                @L_Move.canceled += instance.OnL_Move;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public ManualPlayerActions @ManualPlayer => new ManualPlayerActions(this);
    public interface IManualPlayerActions
    {
        void OnR_Move(InputAction.CallbackContext context);
        void OnL_Move(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
